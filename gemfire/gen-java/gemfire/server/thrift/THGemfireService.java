/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package gemfire.server.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class THGemfireService {

  public interface Iface {

    /**
     * insert a key value pair into a gemfire region.
     * 
     * @param regionName regionName to put the entry
     * 
     * @param keyName key as of now only accepting as a string
     * 
     * @param value value will of the form of map in which first is the key
     * second is value
     */
    public void put(ByteBuffer regionName, ByteBuffer keyName, Map<ByteBuffer,ByteBuffer> value) throws THGemfireInternalError, org.apache.thrift.TException;

    /**
     * insert a key value pair into a gemfire region.
     * 
     * @param regionName regionName to put the entry
     * 
     * @param keyName key as of now only accepting as a string
     */
    public Map<ByteBuffer,ByteBuffer> get(ByteBuffer regionName, ByteBuffer keyName) throws THGemfireInternalError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void put(ByteBuffer regionName, ByteBuffer keyName, Map<ByteBuffer,ByteBuffer> value, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.put_call> resultHandler) throws org.apache.thrift.TException;

    public void get(ByteBuffer regionName, ByteBuffer keyName, org.apache.thrift.async.AsyncMethodCallback<AsyncClient.get_call> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void put(ByteBuffer regionName, ByteBuffer keyName, Map<ByteBuffer,ByteBuffer> value) throws THGemfireInternalError, org.apache.thrift.TException
    {
      send_put(regionName, keyName, value);
      recv_put();
    }

    public void send_put(ByteBuffer regionName, ByteBuffer keyName, Map<ByteBuffer,ByteBuffer> value) throws org.apache.thrift.TException
    {
      put_args args = new put_args();
      args.setRegionName(regionName);
      args.setKeyName(keyName);
      args.setValue(value);
      sendBase("put", args);
    }

    public void recv_put() throws THGemfireInternalError, org.apache.thrift.TException
    {
      put_result result = new put_result();
      receiveBase(result, "put");
      if (result.gError != null) {
        throw result.gError;
      }
      return;
    }

    public Map<ByteBuffer,ByteBuffer> get(ByteBuffer regionName, ByteBuffer keyName) throws THGemfireInternalError, org.apache.thrift.TException
    {
      send_get(regionName, keyName);
      return recv_get();
    }

    public void send_get(ByteBuffer regionName, ByteBuffer keyName) throws org.apache.thrift.TException
    {
      get_args args = new get_args();
      args.setRegionName(regionName);
      args.setKeyName(keyName);
      sendBase("get", args);
    }

    public Map<ByteBuffer,ByteBuffer> recv_get() throws THGemfireInternalError, org.apache.thrift.TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.gError != null) {
        throw result.gError;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void put(ByteBuffer regionName, ByteBuffer keyName, Map<ByteBuffer,ByteBuffer> value, org.apache.thrift.async.AsyncMethodCallback<put_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put_call method_call = new put_call(regionName, keyName, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer regionName;
      private ByteBuffer keyName;
      private Map<ByteBuffer,ByteBuffer> value;
      public put_call(ByteBuffer regionName, ByteBuffer keyName, Map<ByteBuffer,ByteBuffer> value, org.apache.thrift.async.AsyncMethodCallback<put_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.regionName = regionName;
        this.keyName = keyName;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put", org.apache.thrift.protocol.TMessageType.CALL, 0));
        put_args args = new put_args();
        args.setRegionName(regionName);
        args.setKeyName(keyName);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws THGemfireInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_put();
      }
    }

    public void get(ByteBuffer regionName, ByteBuffer keyName, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_call method_call = new get_call(regionName, keyName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer regionName;
      private ByteBuffer keyName;
      public get_call(ByteBuffer regionName, ByteBuffer keyName, org.apache.thrift.async.AsyncMethodCallback<get_call> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.regionName = regionName;
        this.keyName = keyName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setRegionName(regionName);
        args.setKeyName(keyName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Map<ByteBuffer,ByteBuffer> getResult() throws THGemfireInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("put", new put());
      processMap.put("get", new get());
      return processMap;
    }

    public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
        put_result result = new put_result();
        try {
          iface.put(args.regionName, args.keyName, args.value);
        } catch (THGemfireInternalError gError) {
          result.gError = gError;
        }
        return result;
      }
    }

    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
        get_result result = new get_result();
        try {
          result.success = iface.get(args.regionName, args.keyName);
        } catch (THGemfireInternalError gError) {
          result.gError = gError;
        }
        return result;
      }
    }

  }

  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");

    private static final org.apache.thrift.protocol.TField REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("keyName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.MAP, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_argsTupleSchemeFactory());
    }

    /**
     * regionName to put the entry
     */
    public ByteBuffer regionName; // required
    /**
     * key as of now only accepting as a string
     */
    public ByteBuffer keyName; // required
    /**
     * value will of the form of map in which first is the key
     * second is value
     */
    public Map<ByteBuffer,ByteBuffer> value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * regionName to put the entry
       */
      REGION_NAME((short)1, "regionName"),
      /**
       * key as of now only accepting as a string
       */
      KEY_NAME((short)2, "keyName"),
      /**
       * value will of the form of map in which first is the key
       * second is value
       */
      VALUE((short)3, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGION_NAME
            return REGION_NAME;
          case 2: // KEY_NAME
            return KEY_NAME;
          case 3: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGION_NAME, new org.apache.thrift.meta_data.FieldMetaData("regionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.KEY_NAME, new org.apache.thrift.meta_data.FieldMetaData("keyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
    }

    public put_args(
      ByteBuffer regionName,
      ByteBuffer keyName,
      Map<ByteBuffer,ByteBuffer> value)
    {
      this();
      this.regionName = regionName;
      this.keyName = keyName;
      this.value = value;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      if (other.isSetRegionName()) {
        this.regionName = org.apache.thrift.TBaseHelper.copyBinary(other.regionName);
;
      }
      if (other.isSetKeyName()) {
        this.keyName = org.apache.thrift.TBaseHelper.copyBinary(other.keyName);
;
      }
      if (other.isSetValue()) {
        Map<ByteBuffer,ByteBuffer> __this__value = new HashMap<ByteBuffer,ByteBuffer>();
        for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.value.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          ByteBuffer other_element_value = other_element.getValue();

          ByteBuffer __this__value_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          ByteBuffer __this__value_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

          __this__value.put(__this__value_copy_key, __this__value_copy_value);
        }
        this.value = __this__value;
      }
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Override
    public void clear() {
      this.regionName = null;
      this.keyName = null;
      this.value = null;
    }

    /**
     * regionName to put the entry
     */
    public byte[] getRegionName() {
      setRegionName(org.apache.thrift.TBaseHelper.rightSize(regionName));
      return regionName == null ? null : regionName.array();
    }

    public ByteBuffer bufferForRegionName() {
      return regionName;
    }

    /**
     * regionName to put the entry
     */
    public put_args setRegionName(byte[] regionName) {
      setRegionName(regionName == null ? (ByteBuffer)null : ByteBuffer.wrap(regionName));
      return this;
    }

    public put_args setRegionName(ByteBuffer regionName) {
      this.regionName = regionName;
      return this;
    }

    public void unsetRegionName() {
      this.regionName = null;
    }

    /** Returns true if field regionName is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionName() {
      return this.regionName != null;
    }

    public void setRegionNameIsSet(boolean value) {
      if (!value) {
        this.regionName = null;
      }
    }

    /**
     * key as of now only accepting as a string
     */
    public byte[] getKeyName() {
      setKeyName(org.apache.thrift.TBaseHelper.rightSize(keyName));
      return keyName == null ? null : keyName.array();
    }

    public ByteBuffer bufferForKeyName() {
      return keyName;
    }

    /**
     * key as of now only accepting as a string
     */
    public put_args setKeyName(byte[] keyName) {
      setKeyName(keyName == null ? (ByteBuffer)null : ByteBuffer.wrap(keyName));
      return this;
    }

    public put_args setKeyName(ByteBuffer keyName) {
      this.keyName = keyName;
      return this;
    }

    public void unsetKeyName() {
      this.keyName = null;
    }

    /** Returns true if field keyName is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyName() {
      return this.keyName != null;
    }

    public void setKeyNameIsSet(boolean value) {
      if (!value) {
        this.keyName = null;
      }
    }

    public int getValueSize() {
      return (this.value == null) ? 0 : this.value.size();
    }

    public void putToValue(ByteBuffer key, ByteBuffer val) {
      if (this.value == null) {
        this.value = new HashMap<ByteBuffer,ByteBuffer>();
      }
      this.value.put(key, val);
    }

    /**
     * value will of the form of map in which first is the key
     * second is value
     */
    public Map<ByteBuffer,ByteBuffer> getValue() {
      return this.value;
    }

    /**
     * value will of the form of map in which first is the key
     * second is value
     */
    public put_args setValue(Map<ByteBuffer,ByteBuffer> value) {
      this.value = value;
      return this;
    }

    public void unsetValue() {
      this.value = null;
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return this.value != null;
    }

    public void setValueIsSet(boolean value) {
      if (!value) {
        this.value = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGION_NAME:
        if (value == null) {
          unsetRegionName();
        } else {
          setRegionName((ByteBuffer)value);
        }
        break;

      case KEY_NAME:
        if (value == null) {
          unsetKeyName();
        } else {
          setKeyName((ByteBuffer)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Map<ByteBuffer,ByteBuffer>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGION_NAME:
        return getRegionName();

      case KEY_NAME:
        return getKeyName();

      case VALUE:
        return getValue();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGION_NAME:
        return isSetRegionName();
      case KEY_NAME:
        return isSetKeyName();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;

      boolean this_present_regionName = true && this.isSetRegionName();
      boolean that_present_regionName = true && that.isSetRegionName();
      if (this_present_regionName || that_present_regionName) {
        if (!(this_present_regionName && that_present_regionName))
          return false;
        if (!this.regionName.equals(that.regionName))
          return false;
      }

      boolean this_present_keyName = true && this.isSetKeyName();
      boolean that_present_keyName = true && that.isSetKeyName();
      if (this_present_keyName || that_present_keyName) {
        if (!(this_present_keyName && that_present_keyName))
          return false;
        if (!this.keyName.equals(that.keyName))
          return false;
      }

      boolean this_present_value = true && this.isSetValue();
      boolean that_present_value = true && that.isSetValue();
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (!this.value.equals(that.value))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      put_args typedOther = (put_args)other;

      lastComparison = Boolean.valueOf(isSetRegionName()).compareTo(typedOther.isSetRegionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionName, typedOther.regionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyName()).compareTo(typedOther.isSetKeyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyName, typedOther.keyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(typedOther.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, typedOther.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_args(");
      boolean first = true;

      sb.append("regionName:");
      if (this.regionName == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.regionName, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyName:");
      if (this.keyName == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.keyName, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      if (this.value == null) {
        sb.append("null");
      } else {
        sb.append(this.value);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (regionName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'regionName' was not present! Struct: " + toString());
      }
      if (keyName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyName' was not present! Struct: " + toString());
      }
      if (value == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'value' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_argsStandardSchemeFactory implements SchemeFactory {
      public put_argsStandardScheme getScheme() {
        return new put_argsStandardScheme();
      }
    }

    private static class put_argsStandardScheme extends StandardScheme<put_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regionName = iprot.readBinary();
                struct.setRegionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyName = iprot.readBinary();
                struct.setKeyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map0 = iprot.readMapBegin();
                  struct.value = new HashMap<ByteBuffer,ByteBuffer>(2*_map0.size);
                  for (int _i1 = 0; _i1 < _map0.size; ++_i1)
                  {
                    ByteBuffer _key2; // required
                    ByteBuffer _val3; // required
                    _key2 = iprot.readBinary();
                    _val3 = iprot.readBinary();
                    struct.value.put(_key2, _val3);
                  }
                  iprot.readMapEnd();
                }
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.regionName != null) {
          oprot.writeFieldBegin(REGION_NAME_FIELD_DESC);
          oprot.writeBinary(struct.regionName);
          oprot.writeFieldEnd();
        }
        if (struct.keyName != null) {
          oprot.writeFieldBegin(KEY_NAME_FIELD_DESC);
          oprot.writeBinary(struct.keyName);
          oprot.writeFieldEnd();
        }
        if (struct.value != null) {
          oprot.writeFieldBegin(VALUE_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.value.size()));
            for (Map.Entry<ByteBuffer, ByteBuffer> _iter4 : struct.value.entrySet())
            {
              oprot.writeBinary(_iter4.getKey());
              oprot.writeBinary(_iter4.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_argsTupleSchemeFactory implements SchemeFactory {
      public put_argsTupleScheme getScheme() {
        return new put_argsTupleScheme();
      }
    }

    private static class put_argsTupleScheme extends TupleScheme<put_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeBinary(struct.regionName);
        oprot.writeBinary(struct.keyName);
        {
          oprot.writeI32(struct.value.size());
          for (Map.Entry<ByteBuffer, ByteBuffer> _iter5 : struct.value.entrySet())
          {
            oprot.writeBinary(_iter5.getKey());
            oprot.writeBinary(_iter5.getValue());
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.regionName = iprot.readBinary();
        struct.setRegionNameIsSet(true);
        struct.keyName = iprot.readBinary();
        struct.setKeyNameIsSet(true);
        {
          org.apache.thrift.protocol.TMap _map6 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.value = new HashMap<ByteBuffer,ByteBuffer>(2*_map6.size);
          for (int _i7 = 0; _i7 < _map6.size; ++_i7)
          {
            ByteBuffer _key8; // required
            ByteBuffer _val9; // required
            _key8 = iprot.readBinary();
            _val9 = iprot.readBinary();
            struct.value.put(_key8, _val9);
          }
        }
        struct.setValueIsSet(true);
      }
    }

  }

  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");

    private static final org.apache.thrift.protocol.TField G_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("gError", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_resultTupleSchemeFactory());
    }

    public THGemfireInternalError gError; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      G_ERROR((short)1, "gError");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // G_ERROR
            return G_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.G_ERROR, new org.apache.thrift.meta_data.FieldMetaData("gError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    public put_result(
      THGemfireInternalError gError)
    {
      this();
      this.gError = gError;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
      if (other.isSetGError()) {
        this.gError = new THGemfireInternalError(other.gError);
      }
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Override
    public void clear() {
      this.gError = null;
    }

    public THGemfireInternalError getGError() {
      return this.gError;
    }

    public put_result setGError(THGemfireInternalError gError) {
      this.gError = gError;
      return this;
    }

    public void unsetGError() {
      this.gError = null;
    }

    /** Returns true if field gError is set (has been assigned a value) and false otherwise */
    public boolean isSetGError() {
      return this.gError != null;
    }

    public void setGErrorIsSet(boolean value) {
      if (!value) {
        this.gError = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case G_ERROR:
        if (value == null) {
          unsetGError();
        } else {
          setGError((THGemfireInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case G_ERROR:
        return getGError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case G_ERROR:
        return isSetGError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;

      boolean this_present_gError = true && this.isSetGError();
      boolean that_present_gError = true && that.isSetGError();
      if (this_present_gError || that_present_gError) {
        if (!(this_present_gError && that_present_gError))
          return false;
        if (!this.gError.equals(that.gError))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      put_result typedOther = (put_result)other;

      lastComparison = Boolean.valueOf(isSetGError()).compareTo(typedOther.isSetGError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gError, typedOther.gError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_result(");
      boolean first = true;

      sb.append("gError:");
      if (this.gError == null) {
        sb.append("null");
      } else {
        sb.append(this.gError);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_resultStandardSchemeFactory implements SchemeFactory {
      public put_resultStandardScheme getScheme() {
        return new put_resultStandardScheme();
      }
    }

    private static class put_resultStandardScheme extends StandardScheme<put_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // G_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gError = new THGemfireInternalError();
                struct.gError.read(iprot);
                struct.setGErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gError != null) {
          oprot.writeFieldBegin(G_ERROR_FIELD_DESC);
          struct.gError.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_resultTupleSchemeFactory implements SchemeFactory {
      public put_resultTupleScheme getScheme() {
        return new put_resultTupleScheme();
      }
    }

    private static class put_resultTupleScheme extends TupleScheme<put_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGError()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGError()) {
          struct.gError.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gError = new THGemfireInternalError();
          struct.gError.read(iprot);
          struct.setGErrorIsSet(true);
        }
      }
    }

  }

  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

    private static final org.apache.thrift.protocol.TField REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionName", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField KEY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("keyName", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_argsTupleSchemeFactory());
    }

    /**
     * regionName to put the entry
     */
    public ByteBuffer regionName; // required
    /**
     * key as of now only accepting as a string
     */
    public ByteBuffer keyName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * regionName to put the entry
       */
      REGION_NAME((short)1, "regionName"),
      /**
       * key as of now only accepting as a string
       */
      KEY_NAME((short)2, "keyName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REGION_NAME
            return REGION_NAME;
          case 2: // KEY_NAME
            return KEY_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REGION_NAME, new org.apache.thrift.meta_data.FieldMetaData("regionName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.KEY_NAME, new org.apache.thrift.meta_data.FieldMetaData("keyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      ByteBuffer regionName,
      ByteBuffer keyName)
    {
      this();
      this.regionName = regionName;
      this.keyName = keyName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.isSetRegionName()) {
        this.regionName = org.apache.thrift.TBaseHelper.copyBinary(other.regionName);
;
      }
      if (other.isSetKeyName()) {
        this.keyName = org.apache.thrift.TBaseHelper.copyBinary(other.keyName);
;
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.regionName = null;
      this.keyName = null;
    }

    /**
     * regionName to put the entry
     */
    public byte[] getRegionName() {
      setRegionName(org.apache.thrift.TBaseHelper.rightSize(regionName));
      return regionName == null ? null : regionName.array();
    }

    public ByteBuffer bufferForRegionName() {
      return regionName;
    }

    /**
     * regionName to put the entry
     */
    public get_args setRegionName(byte[] regionName) {
      setRegionName(regionName == null ? (ByteBuffer)null : ByteBuffer.wrap(regionName));
      return this;
    }

    public get_args setRegionName(ByteBuffer regionName) {
      this.regionName = regionName;
      return this;
    }

    public void unsetRegionName() {
      this.regionName = null;
    }

    /** Returns true if field regionName is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionName() {
      return this.regionName != null;
    }

    public void setRegionNameIsSet(boolean value) {
      if (!value) {
        this.regionName = null;
      }
    }

    /**
     * key as of now only accepting as a string
     */
    public byte[] getKeyName() {
      setKeyName(org.apache.thrift.TBaseHelper.rightSize(keyName));
      return keyName == null ? null : keyName.array();
    }

    public ByteBuffer bufferForKeyName() {
      return keyName;
    }

    /**
     * key as of now only accepting as a string
     */
    public get_args setKeyName(byte[] keyName) {
      setKeyName(keyName == null ? (ByteBuffer)null : ByteBuffer.wrap(keyName));
      return this;
    }

    public get_args setKeyName(ByteBuffer keyName) {
      this.keyName = keyName;
      return this;
    }

    public void unsetKeyName() {
      this.keyName = null;
    }

    /** Returns true if field keyName is set (has been assigned a value) and false otherwise */
    public boolean isSetKeyName() {
      return this.keyName != null;
    }

    public void setKeyNameIsSet(boolean value) {
      if (!value) {
        this.keyName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REGION_NAME:
        if (value == null) {
          unsetRegionName();
        } else {
          setRegionName((ByteBuffer)value);
        }
        break;

      case KEY_NAME:
        if (value == null) {
          unsetKeyName();
        } else {
          setKeyName((ByteBuffer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REGION_NAME:
        return getRegionName();

      case KEY_NAME:
        return getKeyName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REGION_NAME:
        return isSetRegionName();
      case KEY_NAME:
        return isSetKeyName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_regionName = true && this.isSetRegionName();
      boolean that_present_regionName = true && that.isSetRegionName();
      if (this_present_regionName || that_present_regionName) {
        if (!(this_present_regionName && that_present_regionName))
          return false;
        if (!this.regionName.equals(that.regionName))
          return false;
      }

      boolean this_present_keyName = true && this.isSetKeyName();
      boolean that_present_keyName = true && that.isSetKeyName();
      if (this_present_keyName || that_present_keyName) {
        if (!(this_present_keyName && that_present_keyName))
          return false;
        if (!this.keyName.equals(that.keyName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_args typedOther = (get_args)other;

      lastComparison = Boolean.valueOf(isSetRegionName()).compareTo(typedOther.isSetRegionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionName, typedOther.regionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetKeyName()).compareTo(typedOther.isSetKeyName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKeyName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyName, typedOther.keyName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("regionName:");
      if (this.regionName == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.regionName, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("keyName:");
      if (this.keyName == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.keyName, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      if (regionName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'regionName' was not present! Struct: " + toString());
      }
      if (keyName == null) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyName' was not present! Struct: " + toString());
      }
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_argsStandardSchemeFactory implements SchemeFactory {
      public get_argsStandardScheme getScheme() {
        return new get_argsStandardScheme();
      }
    }

    private static class get_argsStandardScheme extends StandardScheme<get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REGION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regionName = iprot.readBinary();
                struct.setRegionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // KEY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.keyName = iprot.readBinary();
                struct.setKeyNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.regionName != null) {
          oprot.writeFieldBegin(REGION_NAME_FIELD_DESC);
          oprot.writeBinary(struct.regionName);
          oprot.writeFieldEnd();
        }
        if (struct.keyName != null) {
          oprot.writeFieldBegin(KEY_NAME_FIELD_DESC);
          oprot.writeBinary(struct.keyName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_argsTupleSchemeFactory implements SchemeFactory {
      public get_argsTupleScheme getScheme() {
        return new get_argsTupleScheme();
      }
    }

    private static class get_argsTupleScheme extends TupleScheme<get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        oprot.writeBinary(struct.regionName);
        oprot.writeBinary(struct.keyName);
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        struct.regionName = iprot.readBinary();
        struct.setRegionNameIsSet(true);
        struct.keyName = iprot.readBinary();
        struct.setKeyNameIsSet(true);
      }
    }

  }

  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField G_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("gError", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_resultTupleSchemeFactory());
    }

    public Map<ByteBuffer,ByteBuffer> success; // required
    public THGemfireInternalError gError; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      G_ERROR((short)1, "gError");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // G_ERROR
            return G_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , true))));
      tmpMap.put(_Fields.G_ERROR, new org.apache.thrift.meta_data.FieldMetaData("gError", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      Map<ByteBuffer,ByteBuffer> success,
      THGemfireInternalError gError)
    {
      this();
      this.success = success;
      this.gError = gError;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.isSetSuccess()) {
        Map<ByteBuffer,ByteBuffer> __this__success = new HashMap<ByteBuffer,ByteBuffer>();
        for (Map.Entry<ByteBuffer, ByteBuffer> other_element : other.success.entrySet()) {

          ByteBuffer other_element_key = other_element.getKey();
          ByteBuffer other_element_value = other_element.getValue();

          ByteBuffer __this__success_copy_key = org.apache.thrift.TBaseHelper.copyBinary(other_element_key);
;

          ByteBuffer __this__success_copy_value = org.apache.thrift.TBaseHelper.copyBinary(other_element_value);
;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetGError()) {
        this.gError = new THGemfireInternalError(other.gError);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.gError = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(ByteBuffer key, ByteBuffer val) {
      if (this.success == null) {
        this.success = new HashMap<ByteBuffer,ByteBuffer>();
      }
      this.success.put(key, val);
    }

    public Map<ByteBuffer,ByteBuffer> getSuccess() {
      return this.success;
    }

    public get_result setSuccess(Map<ByteBuffer,ByteBuffer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public THGemfireInternalError getGError() {
      return this.gError;
    }

    public get_result setGError(THGemfireInternalError gError) {
      this.gError = gError;
      return this;
    }

    public void unsetGError() {
      this.gError = null;
    }

    /** Returns true if field gError is set (has been assigned a value) and false otherwise */
    public boolean isSetGError() {
      return this.gError != null;
    }

    public void setGErrorIsSet(boolean value) {
      if (!value) {
        this.gError = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Map<ByteBuffer,ByteBuffer>)value);
        }
        break;

      case G_ERROR:
        if (value == null) {
          unsetGError();
        } else {
          setGError((THGemfireInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case G_ERROR:
        return getGError();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case G_ERROR:
        return isSetGError();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_gError = true && this.isSetGError();
      boolean that_present_gError = true && that.isSetGError();
      if (this_present_gError || that_present_gError) {
        if (!(this_present_gError && that_present_gError))
          return false;
        if (!this.gError.equals(that.gError))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;
      get_result typedOther = (get_result)other;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGError()).compareTo(typedOther.isSetGError());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGError()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gError, typedOther.gError);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("gError:");
      if (this.gError == null) {
        sb.append("null");
      } else {
        sb.append(this.gError);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_resultStandardSchemeFactory implements SchemeFactory {
      public get_resultStandardScheme getScheme() {
        return new get_resultStandardScheme();
      }
    }

    private static class get_resultStandardScheme extends StandardScheme<get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map10 = iprot.readMapBegin();
                  struct.success = new HashMap<ByteBuffer,ByteBuffer>(2*_map10.size);
                  for (int _i11 = 0; _i11 < _map10.size; ++_i11)
                  {
                    ByteBuffer _key12; // required
                    ByteBuffer _val13; // required
                    _key12 = iprot.readBinary();
                    _val13 = iprot.readBinary();
                    struct.success.put(_key12, _val13);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // G_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.gError = new THGemfireInternalError();
                struct.gError.read(iprot);
                struct.setGErrorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (Map.Entry<ByteBuffer, ByteBuffer> _iter14 : struct.success.entrySet())
            {
              oprot.writeBinary(_iter14.getKey());
              oprot.writeBinary(_iter14.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.gError != null) {
          oprot.writeFieldBegin(G_ERROR_FIELD_DESC);
          struct.gError.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_resultTupleSchemeFactory implements SchemeFactory {
      public get_resultTupleScheme getScheme() {
        return new get_resultTupleScheme();
      }
    }

    private static class get_resultTupleScheme extends TupleScheme<get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetGError()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Map.Entry<ByteBuffer, ByteBuffer> _iter15 : struct.success.entrySet())
            {
              oprot.writeBinary(_iter15.getKey());
              oprot.writeBinary(_iter15.getValue());
            }
          }
        }
        if (struct.isSetGError()) {
          struct.gError.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map16 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new HashMap<ByteBuffer,ByteBuffer>(2*_map16.size);
            for (int _i17 = 0; _i17 < _map16.size; ++_i17)
            {
              ByteBuffer _key18; // required
              ByteBuffer _val19; // required
              _key18 = iprot.readBinary();
              _val19 = iprot.readBinary();
              struct.success.put(_key18, _val19);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.gError = new THGemfireInternalError();
          struct.gError.read(iprot);
          struct.setGErrorIsSet(true);
        }
      }
    }

  }

}
