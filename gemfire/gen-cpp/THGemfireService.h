/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef THGemfireService_H
#define THGemfireService_H

#include <thrift/TDispatchProcessor.h>
#include "gemfire_types.h"



class THGemfireServiceIf {
 public:
  virtual ~THGemfireServiceIf() {}
  virtual void put(const std::string& regionName, const std::string& keyName, const std::map<std::string, std::string> & value) = 0;
  virtual void get(std::map<std::string, std::string> & _return, const std::string& regionName, const std::string& keyName) = 0;
};

class THGemfireServiceIfFactory {
 public:
  typedef THGemfireServiceIf Handler;

  virtual ~THGemfireServiceIfFactory() {}

  virtual THGemfireServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(THGemfireServiceIf* /* handler */) = 0;
};

class THGemfireServiceIfSingletonFactory : virtual public THGemfireServiceIfFactory {
 public:
  THGemfireServiceIfSingletonFactory(const boost::shared_ptr<THGemfireServiceIf>& iface) : iface_(iface) {}
  virtual ~THGemfireServiceIfSingletonFactory() {}

  virtual THGemfireServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(THGemfireServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<THGemfireServiceIf> iface_;
};

class THGemfireServiceNull : virtual public THGemfireServiceIf {
 public:
  virtual ~THGemfireServiceNull() {}
  void put(const std::string& /* regionName */, const std::string& /* keyName */, const std::map<std::string, std::string> & /* value */) {
    return;
  }
  void get(std::map<std::string, std::string> & /* _return */, const std::string& /* regionName */, const std::string& /* keyName */) {
    return;
  }
};


class THGemfireService_put_args {
 public:

  THGemfireService_put_args() : regionName(), keyName() {
  }

  virtual ~THGemfireService_put_args() throw() {}

  std::string regionName;
  std::string keyName;
  std::map<std::string, std::string>  value;

  void __set_regionName(const std::string& val) {
    regionName = val;
  }

  void __set_keyName(const std::string& val) {
    keyName = val;
  }

  void __set_value(const std::map<std::string, std::string> & val) {
    value = val;
  }

  bool operator == (const THGemfireService_put_args & rhs) const
  {
    if (!(regionName == rhs.regionName))
      return false;
    if (!(keyName == rhs.keyName))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const THGemfireService_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THGemfireService_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THGemfireService_put_pargs {
 public:


  virtual ~THGemfireService_put_pargs() throw() {}

  const std::string* regionName;
  const std::string* keyName;
  const std::map<std::string, std::string> * value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THGemfireService_put_result__isset {
  _THGemfireService_put_result__isset() : gError(false) {}
  bool gError;
} _THGemfireService_put_result__isset;

class THGemfireService_put_result {
 public:

  THGemfireService_put_result() {
  }

  virtual ~THGemfireService_put_result() throw() {}

  THGemfireInternalError gError;

  _THGemfireService_put_result__isset __isset;

  void __set_gError(const THGemfireInternalError& val) {
    gError = val;
  }

  bool operator == (const THGemfireService_put_result & rhs) const
  {
    if (!(gError == rhs.gError))
      return false;
    return true;
  }
  bool operator != (const THGemfireService_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THGemfireService_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THGemfireService_put_presult__isset {
  _THGemfireService_put_presult__isset() : gError(false) {}
  bool gError;
} _THGemfireService_put_presult__isset;

class THGemfireService_put_presult {
 public:


  virtual ~THGemfireService_put_presult() throw() {}

  THGemfireInternalError gError;

  _THGemfireService_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class THGemfireService_get_args {
 public:

  THGemfireService_get_args() : regionName(), keyName() {
  }

  virtual ~THGemfireService_get_args() throw() {}

  std::string regionName;
  std::string keyName;

  void __set_regionName(const std::string& val) {
    regionName = val;
  }

  void __set_keyName(const std::string& val) {
    keyName = val;
  }

  bool operator == (const THGemfireService_get_args & rhs) const
  {
    if (!(regionName == rhs.regionName))
      return false;
    if (!(keyName == rhs.keyName))
      return false;
    return true;
  }
  bool operator != (const THGemfireService_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THGemfireService_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class THGemfireService_get_pargs {
 public:


  virtual ~THGemfireService_get_pargs() throw() {}

  const std::string* regionName;
  const std::string* keyName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THGemfireService_get_result__isset {
  _THGemfireService_get_result__isset() : success(false), gError(false) {}
  bool success;
  bool gError;
} _THGemfireService_get_result__isset;

class THGemfireService_get_result {
 public:

  THGemfireService_get_result() {
  }

  virtual ~THGemfireService_get_result() throw() {}

  std::map<std::string, std::string>  success;
  THGemfireInternalError gError;

  _THGemfireService_get_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  void __set_gError(const THGemfireInternalError& val) {
    gError = val;
  }

  bool operator == (const THGemfireService_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(gError == rhs.gError))
      return false;
    return true;
  }
  bool operator != (const THGemfireService_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const THGemfireService_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _THGemfireService_get_presult__isset {
  _THGemfireService_get_presult__isset() : success(false), gError(false) {}
  bool success;
  bool gError;
} _THGemfireService_get_presult__isset;

class THGemfireService_get_presult {
 public:


  virtual ~THGemfireService_get_presult() throw() {}

  std::map<std::string, std::string> * success;
  THGemfireInternalError gError;

  _THGemfireService_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class THGemfireServiceClient : virtual public THGemfireServiceIf {
 public:
  THGemfireServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  THGemfireServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void put(const std::string& regionName, const std::string& keyName, const std::map<std::string, std::string> & value);
  void send_put(const std::string& regionName, const std::string& keyName, const std::map<std::string, std::string> & value);
  void recv_put();
  void get(std::map<std::string, std::string> & _return, const std::string& regionName, const std::string& keyName);
  void send_get(const std::string& regionName, const std::string& keyName);
  void recv_get(std::map<std::string, std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class THGemfireServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<THGemfireServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext)
  {
      return true;
  }
 private:
  typedef  void (THGemfireServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
  {
  }
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext)
  {
  }
 public:
  THGemfireServiceProcessor(boost::shared_ptr<THGemfireServiceIf> iface) :
    iface_(iface) {
    processMap_["put"] = &THGemfireServiceProcessor::process_put;
    processMap_["get"] = &THGemfireServiceProcessor::process_get;
  }

  virtual ~THGemfireServiceProcessor() {}
};

class THGemfireServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  THGemfireServiceProcessorFactory(const ::boost::shared_ptr< THGemfireServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< THGemfireServiceIfFactory > handlerFactory_;
};

class THGemfireServiceMultiface : virtual public THGemfireServiceIf {
 public:
  THGemfireServiceMultiface(std::vector<boost::shared_ptr<THGemfireServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~THGemfireServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<THGemfireServiceIf> > ifaces_;
  THGemfireServiceMultiface() {}
  void add(boost::shared_ptr<THGemfireServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put(const std::string& regionName, const std::string& keyName, const std::map<std::string, std::string> & value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(regionName, keyName, value);
    }
    ifaces_[i]->put(regionName, keyName, value);
  }

  void get(std::map<std::string, std::string> & _return, const std::string& regionName, const std::string& keyName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, regionName, keyName);
    }
    ifaces_[i]->get(_return, regionName, keyName);
    return;
  }

};



#endif
